/*** BeginHeader */
#ifndef CHECKSUM_LIB
#define CHECKSUM_LIB
/*** EndHeader */

/*** BeginHeader */
#define X25_INIT_CRC 0xffff
#define X25_VALIDATE_CRC 0xf0b8
/*** EndHeader */

 /*** BeginHeader crc_accumulate */
 void crc_accumulate(uint8_t data, uint16_t *crcAccum);
 /*** EndHeader */
 void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp=data ^ (uint8_t)(*crcAccum &0xff);
        tmp^= (tmp<<4);
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
}

/*** BeginHeader crc_init */
void crc_init(uint16_t* crcAccum);
 /*** EndHeader */
void crc_init(uint16_t* crcAccum)
{
        *crcAccum = X25_INIT_CRC;
}//end crc_init

/*** BeginHeader crc_add_seed */
void crc_add_seed(uint16_t* crcAccum);
 /*** EndHeader */
void crc_add_seed(uint16_t* crcAccum)
{


}//end crc_add_seed

/*** BeginHeader crc_calculate */
uint16_t crc_calculate(uint8_t* pBuffer, int length);
/*** EndHeader */
uint16_t crc_calculate(uint8_t* pBuffer, int length)
{
        // For a "message" of length bytes contained in the unsigned char array
        // pointed to by pBuffer, calculate the CRC
        // crcCalculate(unsigned char* pBuffer, int length, unsigned short* checkConst) < not needed

        uint16_t crcTmp;
        uint8_t* pTmp;
		  int i;

        pTmp=pBuffer;

        /* init crcTmp */
        crc_init(&crcTmp);
        *pTmp++;  //skip header byte
        for (i = 0; i < length; i++)
        		{
                crc_accumulate(*pTmp++, &crcTmp);
        		}

        return(crcTmp);
}//end crc_calculate

/*** BeginHeader */
#endif
/*** EndHeader */




