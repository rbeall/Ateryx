/*** BeginHeader mavlink_bytes_to_flt */
float mavlink_bytes_to_flt(char* src);
/*** EndHeader */
float mavlink_bytes_to_flt(char* src)
{
	typedef union
   	{
	      float flt_msg;
	      char byte_msg[4];
	   }floatUnion;
   floatUnion param_union;
   //endianess is going to change in 1.0 mavlink
   param_union.byte_msg[0] = src[0];
   param_union.byte_msg[1] = src[1];
   param_union.byte_msg[2] = src[2];
   param_union.byte_msg[3] = src[3];

   return param_union.flt_msg;

}//end mavlink_bytes_to_flt

/*** BeginHeader mavlink_bytes_to_long */
long mavlink_bytes_to_long(char* src);
/*** EndHeader */
long mavlink_bytes_to_long(char* src)
{
	typedef union
   	{
	      long long_msg;
	      char byte_msg[4];
	   }longUnion;
   longUnion param_union;

   param_union.byte_msg[0] = src[0];
   param_union.byte_msg[1] = src[1];
   param_union.byte_msg[2] = src[2];
   param_union.byte_msg[3] = src[3];

   return param_union.long_msg;

}//end mavlink_bytes_to_flt

/*** BeginHeader mavlink_bytes_to_uint */
unsigned int mavlink_bytes_to_uint(char* src);
/*** EndHeader */
unsigned int mavlink_bytes_to_uint(char* src)
{
	typedef union
   	{
	      unsigned int uint_msg;
	      char byte_msg[2];
	   }uintUnion;
   uintUnion param_union;
   //endianess is going to change in 1.0 mavlink
   param_union.byte_msg[0] = src[0];
   param_union.byte_msg[1] = src[1];


   return param_union.uint_msg;

}//end mavlink_bytes_to_uint

/*** BeginHeader mavlink_bytes_to_int */
int mavlink_bytes_to_int(char* src);
/*** EndHeader */
int mavlink_bytes_to_int(char* src)
{
	typedef union
   	{
	      int int_msg;
	      char byte_msg[2];
	   }intUnion;
   intUnion param_union;
   //endianess is going to change in 1.0 mavlink
   param_union.byte_msg[0] = src[0];
   param_union.byte_msg[1] = src[1];

   return param_union.int_msg;

}//end mavlink_bytes_to_uint

/*** BeginHeader mavlink_echo_pkt */
void mavlink_echo_pkt(char* src_pkt, unsigned int payload_length);
/*** EndHeader */
void mavlink_echo_pkt(char* src_pkt, unsigned int payload_length)
{
    char pkt[256];
    unsigned int i;

    memcpy(&pkt,&src_pkt,(payload_length + MAVLINK_NUM_NON_PAYLOAD_BYTES));
    for(i = 0; i < (payload_length + 8); i++)
   	   {
	         serFputc(pkt[i]);
	      }
   packet_sequence++;

}//end mavlink_echo_pkt

