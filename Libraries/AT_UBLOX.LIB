/*** BeginHeader cof_read_ublox */
#define UBX_MAXPAYLOAD 60
#define GPS_RX_STR_LEN 1024         //serial string length
scofunc void cof_read_ublox();
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
cof_read_ublox

DESCRIPTION: Cofunction that reads the ublox gps

RETURN VALUE: None.

END DESCRIPTION **********************************************************/
nodebug
scofunc void cof_read_ublox()
{
	int i;
	int str_length;
	int UBX_step;
	int gps_fix_flag;
	char data;

	char gps_sent[GPS_RX_STR_LEN];
	//char UBX_buffer[UBX_MAXPAYLOAD];
	//char UBX_class,UBX_id;
	char UBX_ck_a,UBX_ck_b;
	char UBX_payload_length_hi,UBX_payload_length_lo;
	int  UBX_payload_counter;

	UBX_step = 0;

	wfd str_length = cof_serDread(gps_sent,GPS_RX_STR_LEN,200);
	serDrdFlush();

	for (i = 0; i < str_length; i++)  // Process bytes received
	{
			data = gps_sent[i];
	switch (UBX_step)
		{
					case 0:
						{
							if(data == 0xB5) // UBX sync char 1
							UBX_step++;      // OH first data packet is correct, so jump to the next step
							break;
						}
					case 1:
						{
								if(data == 0x62)        // UBX sync char 2
								UBX_step++;      // ooh! The second data packet is correct, jump to the step 2
								else
								UBX_step = 0;    // Nop, is not correct so restart to step zero and try again.
							break;
						}
					case 2:
						{
								UBX_class = data;
							ubx_checksum(UBX_class);
							UBX_step++;
							break;
						}
					case 3:
						{
							UBX_id = data;
							ubx_checksum(UBX_id);
							UBX_step++;
							break;
						}
					case 4:
						{
							UBX_payload_length_hi = data;
							ubx_checksum(UBX_payload_length_hi);
							UBX_step++;

							if (UBX_payload_length_hi >= UBX_MAXPAYLOAD)
									{
									UBX_step = 0;    // Bad data, so restart to step zero and try again.
										chk_a = 0;
										chk_b = 0;
								}
								break;
						}
					case 5:
						{
								UBX_payload_length_lo = data;
							ubx_checksum(UBX_payload_length_lo);
							UBX_step++;
							UBX_payload_counter = 0;
							break;
						}
					case 6:
						{
							if (UBX_payload_counter < UBX_payload_length_hi)        // We stay in this state until we reach the payload_length
								{
								UBX_buffer[UBX_payload_counter] = data;
									ubx_checksum(data);
									UBX_payload_counter++;
									if (UBX_payload_counter == UBX_payload_length_hi)
										{
											UBX_step++;
										}
							}
							break;
						}
					case 7:
						{
							UBX_ck_a = data;         // First checksum byte
							UBX_step++;
							break;
						}
					case 8:
						{
							UBX_ck_b = data;  // Second checksum byte
							// We end the GPS read...
								if((chk_a == UBX_ck_a) && (chk_b == UBX_ck_b)) // Verify the received checksum with the generated checksum..
									{
										//printf("\r\n check_sum passed");
										parse_ubx_gps();// Parse the new GPS packet
										gps_fix_flag = 1;
									}
								else
									{
										printf("\r\n GPS Checksum Fail");
										gps_fix_flag =0;
									}
								// Variable initialization
								UBX_step = 0;
								chk_a = 0;
								chk_b = 0;
								//GPS_timer = millis(); // Restarting timer...
								break;
						}
			}//end switch
	}//end for
}//cof_read_ublox

/*** BeginHeader parse_ubx_gps */
void parse_ubx_gps(void);
/*** EndHeader */
void parse_ubx_gps(void)
{
	int j;
	char* UBX_buffer_add;
	float temp_new_sog;

	UBX_buffer_add = &UBX_buffer[0];


	if(UBX_class == 0x01)
			{
				switch(UBX_id) //Checking the UBX ID
					{
							case 0x02: // ID NAV - POSLLH
									{
										//printf("\r\n check_sum passed  %d %f",m_bytes[MB_GPS_FIX_QUALITY],m_floats[MF_GPS_LON]);
										j = 0;
										//Time = join_4_bytes(&UBX_buffer[j]); // ms Time of week
										j += 4;
										//printf("\r\n %x %x %x %x",UBX_buffer[j],UBX_buffer[j+1],UBX_buffer[j+2],UBX_buffer[j+3]);
										m_floats[MF_GPS_LON] = join_4_bytes(UBX_buffer_add,j)*1e-7; // lon * 10000000
										j += 4;
										m_floats[MF_GPS_LAT] = join_4_bytes(UBX_buffer_add,j)*1e-7; // lat * 10000000
										j += 4;
										//Altitude = join_4_bytes(&UBX_buffer[j]);  // elipsoid heigth mm
										j += 4;
										m_floats[MF_GPS_ALTITUDE] = (float)join_4_bytes(UBX_buffer_add,j)/1000; // MSL heigth m

									j += 4;
										m_floats[MF_GPS_HDOP] = (float)join_4_bytes(UBX_buffer_add,j)/1000;
										/*
										j += 4;
										vacc = (float)join_4_bytes(&UBX_buffer[j]) / (float)1000;
										j += 4;
										*/

										break;
								}//end case 0x02

							case 0x03: //ID NAV - STATUS
								{
										m_bytes[MB_GPS_FIX_QUALITY] = UBX_buffer[4];
										if(m_bytes[MB_GPS_FIX_QUALITY] == 0x00)
											{
												m_bytes[MB_GPS_FIX_QUALITY] = 1;
												}
										//printf("\r\n check_sum passed %d",m_bytes[MB_GPS_FIX_QUALITY]);
										// dgps = UBX_buffer[5]
										break;
									}//end case 0x03
							case 0x06: //ID NAV - SOL
								{
										m_bytes[MB_GPS_FIX_QUALITY] = UBX_buffer[10];
										if(m_bytes[MB_GPS_FIX_QUALITY] == 0x00)
											{
												m_bytes[MB_GPS_FIX_QUALITY] = 1;
												}
										m_bytes[MB_GPS_NUM_SATELLITES] = UBX_buffer[47];
										break;
									}//end case 0x03

							case 0x12: // ID NAV - VELNED
									{
										//printf("\r\n check_sum passed %d",m_bytes[MB_GPS_FIX_QUALITY]);
										j = 16;
										//Speed_3d = join_4_bytes(&UBX_buffer[j]); // cm / s
										j += 4;
										m_floats[MF_GPS_SPEED] = (join_4_bytes(UBX_buffer_add,j)/100);

										j += 4;
										m_floats[MF_GPS_HEADING] = join_4_bytes(UBX_buffer_add,j)*1e-5; // Heading 2D deg
										if (m_floats[MF_GPS_HEADING] > 180.0)
											{
													m_floats[MF_GPS_HEADING] = m_floats[MF_GPS_HEADING] - 360.0;
											}
										if (m_floats[MF_GPS_HEADING] < -180.0)
											{
													m_floats[MF_GPS_HEADING] = m_floats[MF_GPS_HEADING] + 360.0;
											}
										m_floats[MF_GPS_HEADING] *= DEG2RAD;

										//j += 4;
								/*
										sacc = join_4_bytes(&UBX_buffer[j]) // Speed accuracy
										j += 4;
										headacc = join_4_bytes(&UBX_buffer[j]) // Heading accuracy
										j += 4;
										*/
										break;
										}//end case 0x12

						}//end switch
			}//end if

}//end parse_ubx_gps

/*** BeginHeader ubx_checksum */
int ubx_checksum(char ubx_data);
/*** EndHeader */
int ubx_checksum(char ubx_data)
{
	chk_a += ubx_data;
	chk_b += chk_a;
}//end ubx_checksum

/*** BeginHeader join_4_bytes */
long join_4_bytes(char *Buffer, int j);
/*** EndHeader */
long join_4_bytes(char *Buffer, int j)
{
typedef union
	{
		long dword;
			char byte[4];
	}longUnion;

	longUnion ubx_union;

	ubx_union.byte[0] = Buffer[j+0];
	ubx_union.byte[1] = Buffer[j+1];
	ubx_union.byte[2] = Buffer[j+2];
	ubx_union.byte[3] = Buffer[j+3];

	return(ubx_union.dword);
}//end join_4_bytes

/*** BeginHeader init_ublox_gps */
void init_ublox_gps(void);
/*** EndHeader */
void init_ublox_gps(void)
{
//refer to u-center config and ublox data sheet
const static char ublox_baud_1152[] = {0xB5,0x62,0x06,0x00,0x14,0x00,0x01,0x00,0x00,0x00,0xD0,0x08,0x00,0x00,0x00,0xC2,0x01,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0xB8,0x42};

const static char rxm_svsi_on[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0x02,0x20,0x00,0x01,0x00,0x00,0x00,0x00,0x32,0x98};
const static char rxm_svsi_off[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0x02,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x31,0x93};
const static char nav_sol_on[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0x01,0x06,0x00,0x01,0x00,0x00,0x00,0x00,0x17,0xDA};
const static char velned_on[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0x01,0x12,0x00,0x01,0x00,0x00,0x00,0x00,0x23,0x2E};
const static char navstatus_on[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0x01,0x03,0x00,0x01,0x00,0x00,0x00,0x00,0x14,0xC5};
const static char navstatus_off[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0x01,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0xC0};
const static char posllh_on[] = {0xB5,0x62,0x06,0x01,0x08,0x00,0x01,0x02,0x00,0x01,0x00,0x00,0x00,0x00,0x13,0xBE};

const static char ublox_save_cnfg[] = {0xB5,0x62,0x06,0x09,0x0D,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x21,0xAF};

serDwrite(&rxm_svsi_off,sizeof(rxm_svsi_off));
serDwrite(&navstatus_off,sizeof(navstatus_off));

serDwrite(&velned_on,sizeof(velned_on));
serDwrite(&posllh_on,sizeof(posllh_on));
serDwrite(&nav_sol_on,sizeof(nav_sol_on));

serDwrite(&ublox_save_cnfg,sizeof(ublox_save_cnfg));

printf("\r\nUblox GPS initialized");
} //end init_ublox_gps
