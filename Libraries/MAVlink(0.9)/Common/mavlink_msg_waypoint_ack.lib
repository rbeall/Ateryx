/*** BeginHeader mavlink_msg_wypt_ack_send */
#define MAVLINK_MSG_ID_WAYPOINT_ACK 47
void mavlink_msg_wypt_ack_send(void);
/*** EndHeader */
void mavlink_msg_wypt_ack_send(void)
{
   auto char pkt[3 + MAVLINK_NUM_NON_PAYLOAD_BYTES];
   auto unsigned int checksum;
   auto int i;
   auto char payload_length;

   //paledon(Tx_led);
   payload_length = 3;

    pkt[0] = MAVLINK_STX; //Mavlink Header
    pkt[1] = payload_length; //Payload length
    pkt[2] = packet_sequence; //Packet sequence
    pkt[3] = mavlink_system.sysid; //System ID
    pkt[4] = mavlink_system.compid; //Component ID
    pkt[5] = MAVLINK_MSG_ID_WAYPOINT_ACK; //Message ID

    pkt[6] = mavlink_system.sysid; ///< System ID
    pkt[7] = mavlink_system.compid; ///< Component ID
    pkt[8] = 0x00; ///< 0: OK, 1: Error

    checksum = crc_calculate((uint8_t*)((void*)pkt), payload_length + MAVLINK_CORE_HEADER_LEN);
    pkt[9] = (uint8_t)(checksum & 0xFF);//0x36; 	//chk_a
    pkt[10] = (uint8_t)(checksum >> 8);//0x83;  //chk_b


    for(i = 0; i < (payload_length + 8); i++)
	{
		serFputc(pkt[i]);
	}
   packet_sequence++;
   //paledoff(Tx_led);
}//end mavlink_msg_wypt_ack_send

/*** BeginHeader mavlink_msg_wypt_to_ram */
void mavlink_msg_wypt_to_ram(unsigned int cmd_index, char* pkt);
/*** EndHeader */
void mavlink_msg_wypt_to_ram(unsigned int cmd_index, char* pkt)
{
     memcpy(&g_cmds[cmd_index].cmd_type, &pkt[11],1);
     memcpy(&g_cmds[cmd_index].lon, &pkt[34],4);
     memcpy(&g_cmds[cmd_index].lat, &pkt[30],4);
     memcpy(&g_cmds[cmd_index].alt, &pkt[38],4);
     memcpy(&g_cmds[cmd_index].vel, &pkt[26],4);
     memcpy(&g_cmds[cmd_index].loiter_time, &pkt[18],4);
     memcpy(&g_cmds[cmd_index].loiter_rad, &pkt[22],4);
     memcpy(&g_cmds[cmd_index].payload, &pkt[14],4);    //radius zone of acceptance
}