/*** BeginHeader mavlink_send_attitude*/
#define MAVLINK_MSG_ID_ATTITUDE 30
void mavlink_send_attitude(void);
/*** EndHeader */
void mavlink_send_attitude(void)
{
   auto char pkt[32 + MAVLINK_NUM_NON_PAYLOAD_BYTES];
   auto unsigned int checksum;
   auto int i;
   auto char payload_length;
   char float_tmp[4];

   //paledon(Tx_led);
   payload_length = 32;

    pkt[0] = MAVLINK_STX; //Mavlink Header
    pkt[1] = payload_length; //Payload length
    pkt[2] = packet_sequence; //Packet sequence
    pkt[3] = mavlink_system.sysid; //System ID
    pkt[4] = mavlink_system.compid; //Component ID
    pkt[5] = MAVLINK_MSG_ID_ATTITUDE; //Message ID

    pkt[6] = 0x00; //uSec
    pkt[7] = 0x00;
    pkt[8] = 0x00;
    pkt[9] = 0x00;
    pkt[10] = 0x00;
    pkt[11] = 0x00;
    pkt[12] = 0x00;
    pkt[13] = 0x00;
    memcpy(float_tmp, &m_floats[MF_PHI], sizeof(m_floats[MF_PHI]));
    pkt[14] = float_tmp[3]; //Roll(rad)
    pkt[15] = float_tmp[2];
    pkt[16] = float_tmp[1];
    pkt[17] = float_tmp[0];
    memcpy(float_tmp, &m_floats[MF_THETA], sizeof(m_floats[MF_THETA]));
    pkt[18] = float_tmp[3]; //Pitch(rad)
    pkt[19] = float_tmp[2];
    pkt[20] = float_tmp[1];
    pkt[21] = float_tmp[0];
    memcpy(float_tmp, &m_floats[MF_PSI], sizeof(m_floats[MF_PSI]));
    pkt[22] = float_tmp[3]; //Yaw(rad)
    pkt[23] = float_tmp[2];
    pkt[24] = float_tmp[1];
    pkt[25] = float_tmp[0];
    memcpy(float_tmp, &m_floats[MF_GYRO_P], sizeof(m_floats[MF_GYRO_P]));
    pkt[26] = float_tmp[3]; //P(rad/s)
    pkt[27] = float_tmp[2];
    pkt[28] = float_tmp[1];
    pkt[29] = float_tmp[0];
    memcpy(float_tmp, &m_floats[MF_GYRO_Q], sizeof(m_floats[MF_GYRO_Q]));
    pkt[30] = float_tmp[3]; //Q(rad/s)
    pkt[31] = float_tmp[2];
    pkt[32] = float_tmp[1];
    pkt[33] = float_tmp[0];
    memcpy(float_tmp, &m_floats[MF_GYRO_R], sizeof(m_floats[MF_GYRO_R]));
    pkt[34] = float_tmp[3]; //R(rad/s)
    pkt[35] = float_tmp[2];
    pkt[36] = float_tmp[1];
    pkt[37] = float_tmp[0];

    checksum = crc_calculate((uint8_t*)((void*)pkt), payload_length + MAVLINK_CORE_HEADER_LEN);
    pkt[38] = (uint8_t)(checksum & 0xFF);//0x36; 	//chk_a
    pkt[39] = (uint8_t)(checksum >> 8);//0x83;  //chk_b


    for(i = 0; i < (payload_length + 8); i++)
	{
		serFputc(pkt[i]);
	}
   packet_sequence++;
   //paledoff(Tx_led);
}//end mavlink_send_attitude